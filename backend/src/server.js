// backend/src/server.js
const dotenv = require('dotenv');
dotenv.config(); // Load environment variables from .env file FIRST

const express = require('express');
const http = require('http');
const { Server } = require("socket.io");
const qrcode = require('qrcode');
const ip = require('ip');
const cors = require('cors');
const path = require('path'); // path module is built-in

// --- Initialize Express App FIRST ---
const app = express(); 
// ------------------------------------

// Now you can require your routes which might also use 'app' indirectly or be fine as they are modules
const aiRoutes = require('./api/aiRoutes'); // Corrected path assuming apiRoutes.js is in ./api/
const imageStorageRoutes = require('./api/imageStorageRoutes');

const SERVER_IP = ip.address();
const PORT = process.env.PORT || 5001;

// Middleware
app.use(cors());
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));

// --- Static File Serving AFTER app is initialized AND before routes if they depend on base path ---
// Serve images generated by AI (and stored temporarily by backend)
app.use('/generated_images_temp', express.static(path.join(__dirname, '..', 'public', 'generated_images_temp')));
// Serve other static files from the main 'public' directory (e.g., phone_upload_page.html, QR images)
app.use(express.static(path.join(__dirname, '..', 'public'))); 
console.log(`Serving static files from: ${path.join(__dirname, '..', 'public')}`);


// API Routes
app.use('/api/ai', aiRoutes);
app.use('/api/images', imageStorageRoutes);


// Simple health check
app.get('/health', (req, res) => {
    res.status(200).send('Backend is healthy!');
});

// QR Code Generation Route
app.get('/qr_code_kiosk.png', async (req, res) => {
    const { kioskId, side = 'front' } = req.query;
    if (!kioskId) {
        console.error("BACKEND QR Gen: kioskId is required.");
        return res.status(400).send("kioskId is required for QR code generation.");
    }
    // Ensure your public folder serves phone_upload_page.html correctly.
    // The base URL for static files is set by app.use(express.static(...))
    const phoneUploadUrl = `http://${SERVER_IP}:${PORT}/phone_upload_page.html?kioskId=${encodeURIComponent(kioskId)}&side=${encodeURIComponent(side)}`;
    console.log(`BACKEND QR Gen: Generating QR for URL: ${phoneUploadUrl}`);
    try {
        const qrImageBuffer = await qrcode.toBuffer(phoneUploadUrl, { errorCorrectionLevel: 'M' });
        res.type('image/png');
        res.send(qrImageBuffer);
    } catch (err) {
        console.error("BACKEND QR Gen: QR Code Generation Error:", err);
        res.status(500).send("Error generating QR code.");
    }
});

// Endpoint for Phone to Upload Image Data To (which then relays via Socket.IO)
app.post('/upload_to_kiosk', (req, res) => {
    const { imageDataUrl, originalFileName, kioskId, side } = req.body;
    console.log(`BACKEND Upload: Received for Kiosk ID: ${kioskId}, Side: ${side}, File: ${originalFileName ? originalFileName.substring(0,30) : 'N/A'}`);
    if (!imageDataUrl || !kioskId || !side) {
        return res.status(400).json({ success: false, message: "Missing required data (imageDataUrl, kioskId, side)." });
    }
    if (typeof imageDataUrl !== 'string' || !imageDataUrl.startsWith('data:image')) {
        return res.status(400).json({ success: false, message: "Invalid image data format." });
    }
    const targetSocket = io.sockets.sockets.get(kioskId);
    if (targetSocket) {
        targetSocket.emit('kiosk_display_image', {
            imageDataUrl, originalFileName: originalFileName || 'uploaded_image.png', side
        });
        res.status(200).json({ success: true, message: "Image data sent to kiosk." });
    } else {
        console.warn(`BACKEND Upload Warning: Kiosk ID ${kioskId} not connected/found.`);
        res.status(404).json({ success: false, message: `Kiosk ${kioskId} not connected.` });
    }
});


const httpServer = http.createServer(app);
const io = new Server(httpServer, {
    cors: {
        origin: process.env.FRONTEND_URL || "http://localhost:5173", // Allow your Vite frontend
        methods: ["GET", "POST"],
        credentials: true
    }
});

io.on('connection', (socket) => {
    console.log(`BACKEND Socket: Client connected - ID: ${socket.id}`);
    socket.on('disconnect', (reason) => {
        console.log(`BACKEND Socket: Client disconnected - ID: ${socket.id}. Reason: ${reason}`);
    });
    socket.on('error', (error) => {
        console.error(`BACKEND Socket Error from ${socket.id}:`, error);
    });
});

httpServer.listen(PORT, () => {
    console.log(`\n--- Kiosk Backend Server ---`);
    console.log(`Server running at: http://localhost:${PORT}`);
    console.log(`Also accessible on your network at: http://${SERVER_IP}:${PORT}`);
    console.log(`Phone upload page (example): http://${SERVER_IP}:${PORT}/phone_upload_page.html?kioskId=YOUR_SOCKET_ID_HERE`);
    console.log(`Ensure GEMINI_API_KEY_BACKEND and HF_AUTH_TOKEN are set in .env for AI features.`);
    console.log(`------------------------------------`);
});

httpServer.on('error', (error) => {
    if (error.code === 'EADDRINUSE') {
        console.error(`FATAL ERROR: Port ${PORT} is already in use. Close the other process or change the PORT in .env.`);
    } else {
        console.error(`FATAL ERROR starting server: ${error}`);
    }
    process.exit(1);
});    